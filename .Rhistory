getwd()
getwd()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
caract <- read_csv("data/caract-2023.csv")
lieux <- read_csv("data/lieux-2023.csv")
usagers <- read_csv("data/usagers-2023.csv")
vehicules <- read_csv("data/vehicules-2023.csv")
names(caract)
names(lieux)
names(usagers)
names(vehicules)
accidents <- caract %>%
left_join(lieux, by = "Num_Acc") %>%
left_join(vehicules, by = "Num_Acc") %>%
left_join(usagers, by = "Num_Acc")
library(tidyverse)
data <- read_csv("data/ObesityDataSet_raw_and_data_sinthetic.csv")
rm(list = ls())
library(tidyverse)
data <- read_csv("data/ObesityDataSet_raw_and_data_sinthetic.csv")
glimpse(data)
summary(data)
colSums(is.na(data))
data <- data %>%
mutate(
Gender = as.factor(Gender),
family_history_with_overweight = as.factor(family_history_with_overweight),
FAVC = as.factor(FAVC),  # Frequent consumption of high caloric food
CAEC = as.factor(CAEC),  # Consumption of food between meals
NObeyesdad = as.factor(NObeyesdad)  # Classe cible
)
# Distribution de l'IMC
ggplot(data, aes(x = BMI)) +
geom_histogram(bins = 30, fill = "steelblue") +
labs(title = "Distribution de l'IMC", x = "IMC", y = "Fréquence")
data <- data %>%
mutate(BMI = Weight / (Height^2))
ggplot(data, aes(x = BMI)) +
geom_histogram(bins = 30, fill = "steelblue") +
labs(title = "Distribution de l'IMC", x = "IMC", y = "Fréquence")
duplicated_rows <- data %>% filter(duplicated(.))
library(tidyverse)
# Charger les données
data <- read_csv("data/ObesityDataSet_raw_and_data_sinthetic.csv")
# Ajouter la colonne IMC
data <- data %>%
mutate(BMI = Weight / (Height^2))
# Supprimer les valeurs aberrantes (règle IQR pour BMI, Age)
clean_data <- data %>%
filter(
between(BMI, quantile(BMI, 0.01), quantile(BMI, 0.99)),
between(Age, 14, 60),  # selon le résumé statistique
between(Height, 1.45, 2),
between(Weight, 40, 170)
)
# Convertir les colonnes catégorielles
clean_data <- clean_data %>%
mutate(across(
c(Gender, family_history_with_overweight, FAVC, CAEC, SMOKE, SCC, CALC, MTRANS, NObeyesdad),
as.factor
))
# Ajouter une colonne tranche d'âge
clean_data <- clean_data %>%
mutate(AgeGroup = case_when(
Age < 18 ~ "Adolescent",
Age < 30 ~ "Jeune adulte",
Age < 45 ~ "Adulte",
TRUE     ~ "Senior"
))
# Vérifier les doublons
duplicates <- clean_data %>% filter(duplicated(.))
n_duplicates <- nrow(duplicates)
print(paste("Nombre de doublons :", n_duplicates))
# Ajouter une colonne tranche d'âge
clean_data <- clean_data %>%
mutate(AgeGroup = case_when(
Age < 18 ~ "Adolescent",
Age < 30 ~ "Jeune adulte",
Age < 45 ~ "Adulte",
TRUE     ~ "Senior"
))
print(paste("Nombre de doublons :", n_duplicates))
source("~/Projet_Shiny/analyse.R", echo = TRUE)
View(duplicates)
View(duplicated_rows)
View(data)
source("~/Projet_Shiny/app.R", echo = TRUE)
shiny::runApp()
